package handler

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type FormData struct {
	Book   Books
	Errors map[string]string
}

func (h *Handler) createBook(w http.ResponseWriter, r *http.Request) {
	ErrorValue := map[string]string{}
	book := Books{}
	h.loadCreateForm(w, book, ErrorValue)
}

func (h *Handler) storeBook(w http.ResponseWriter, r *http.Request) {
	err := r.ParseMultipartForm(10 << 20)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	var book Books
	err = h.decoder.Decode(&book, r.PostForm)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// err = book.Validate()
	// if err != nil {
	// 	vErrors, ok := err.(validation.Errors)
	// 	if ok {
	// 		vErrs := make(map[string]string)
	// 		for key, value := range vErrors {
	// 			vErrs[key] = value.Error()
	// 		}
	// 		h.loadCreateForm(w, book, vErrs)
	// 		return
	// 	}
	// 	http.Error(w, err.Error(), http.StatusInternalServerError)
	// 	return
	// }

	file, _, err := r.FormFile("BookCover")
	if err != nil {
		ErrorValue := map[string]string{
			"Error": "Book Cover is required & image size should be less than 10MB.",
		}
		h.loadCreateForm(w, book, ErrorValue)
		return
	}
	defer file.Close()
	tempFile, err := ioutil.TempFile("assets/book-covers", "cover-*.jpg")
	if err != nil {
		fmt.Println(err)
	}
	defer tempFile.Close()

	fileBytes, err := ioutil.ReadAll(file)
	if err != nil {
		fmt.Println(err)
	}
	tempFile.Write(fileBytes)
	// bookName := r.FormValue("Book")
	// author := r.FormValue("Author")
	// bookDesc := r.FormValue("Description")
	// book := Books{
	// 	BookName: bookName,
	// 	Author:   author,
	// 	BookDesc: bookDesc,
	// }
	bookCoverPath := tempFile.Name()
	book.BookCover = strings.TrimPrefix(bookCoverPath, "assets/book-covers\\")
	if book.BookName == "" {
		ErrorValue := map[string]string{
			"Error": "Book Name field can not be empty.",
		}
		h.loadCreateForm(w, book, ErrorValue)
		return
	} else if len(book.BookName) < 3 {
		ErrorValue := map[string]string{
			"Error": "Book Name field should have atleast 3 characters",
		}
		h.loadCreateForm(w, book, ErrorValue)
		return
	}
	const insertBook = `INSERT INTO books(book_name, author, category, book_description, book_cover) VALUES($1, $2, $3, $4, $5);`
	res := h.db.MustExec(insertBook, book.BookName, book.Author, book.Category, book.BookDesc, book.BookCover)
	ok, err := res.RowsAffected()
	if err != nil || ok == 0 {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
}

// func (h *Handler) CompleteTodo(w http.ResponseWriter, r *http.Request) {
// 	id := r.URL.Path[len("/todo/complete/"):]
// 	if id == "" {
// 		http.Error(w, "Invalid URL", http.StatusInternalServerError)
// 		return
// 	}
// 	const completeTodo = `UPDATE tasks SET is_completed = true WHERE id=$1`
// 	res := h.db.MustExec(completeTodo, id)
// 	ok, err := res.RowsAffected()
// 	if err != nil || ok == 0 {
// 		http.Error(w, err.Error(), http.StatusInternalServerError)
// 		return
// 	}
// 	http.Redirect(w, r, "/todo", http.StatusTemporaryRedirect)
// }

func (h *Handler) editBook(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]
	if id == "" {
		http.Error(w, "Invalid URL", http.StatusInternalServerError)
		return
	}

	const getBook = `SELECT * FROM books WHERE id=$1`
	var book Books
	h.db.Get(&book, getBook, id)

	if book.ID == 0 {
		http.Error(w, "Invalid URL", http.StatusInternalServerError)
		return
	}
	h.loadEditForm(w, book, map[string]string{})
}

func (h *Handler) updateBook(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]
	if id == "" {
		http.Error(w, "Invalid URL", http.StatusInternalServerError)
		return
	}

	const getBook = `SELECT * FROM books WHERE id=$1`
	var book Books
	h.db.Get(&book, getBook, id)

	if book.ID == 0 {
		http.Error(w, "Invalid URL", http.StatusInternalServerError)
		return
	}

	err := r.ParseMultipartForm(10 << 20)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	// var book Books
	err = h.decoder.Decode(&book, r.PostForm)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	file, _, err := r.FormFile("BookCover")
	if err != nil {
		ErrorValue := map[string]string{
			"Error": "Book Cover is required & image size should be less than 10MB.",
		}
		h.loadEditForm(w, book, ErrorValue)
		return
	}
	defer file.Close()
	tempFile, err := ioutil.TempFile("assets/book-covers", "cover-*.jpg")
	if err != nil {
		fmt.Println(err)
	}
	defer tempFile.Close()

	fileBytes, err := ioutil.ReadAll(file)
	if err != nil {
		fmt.Println(err)
	}
	tempFile.Write(fileBytes)
	// newBook := r.FormValue("Book")
	// newAuthor := r.FormValue("Author")
	// newBookDesc := r.FormValue("Description")
	// book.BookName = newBook
	// book.Author = newAuthor
	// book.BookDesc = newBookDesc
	bookCoverPath := tempFile.Name()
	book.BookCover = strings.TrimPrefix(bookCoverPath, "assets/book-covers\\")
	if book.BookName == "" {
		ErrorValue := map[string]string{
			"Error": "Book Name field can not be empty.",
		}
		h.loadEditForm(w, book, ErrorValue)
		return
	} else if len(book.BookName) < 3 {
		ErrorValue := map[string]string{
			"Error": "Book Name field should have atleast 3 characters",
		}
		h.loadEditForm(w, book, ErrorValue)
		return
	}

	const updateTodo = `UPDATE books SET book_name = $2, author = $3, category = $4, book_description = $5, book_cover = $6 WHERE id=$1`
	res := h.db.MustExec(updateTodo, id, book.BookName, book.Author, book.Category, book.BookDesc, book.BookCover)
	ok, err := res.RowsAffected()
	if err != nil || ok == 0 {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
}

func (h *Handler) deleteBook(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]
	if id == "" {
		http.Error(w, "Invalid URL", http.StatusInternalServerError)
		return
	}

	const getBook = `SELECT * FROM books WHERE id=$1`
	var book Books
	h.db.Get(&book, getBook, id)

	if book.ID == 0 {
		http.Error(w, "Invalid URL", http.StatusInternalServerError)
		return
	}
	const deleteBook = `DELETE FROM books WHERE id=$1`
	res := h.db.MustExec(deleteBook, id)
	ok, err := res.RowsAffected()
	if err != nil || ok == 0 {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
	http.Redirect(w, r, "/", http.StatusTemporaryRedirect)
}

// Form Validation
func (h *Handler) loadCreateForm(w http.ResponseWriter, book Books, myErrors map[string]string) {
	form := FormData{
		Book:   book,
		Errors: myErrors,
	}

	err := h.templates.ExecuteTemplate(w, "create-book.html", form)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}

func (h *Handler) loadEditForm(w http.ResponseWriter, book Books, myErrors map[string]string) {
	form := FormData{
		Book:   book,
		Errors: myErrors,
	}

	err := h.templates.ExecuteTemplate(w, "edit-book.html", form)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}
}
